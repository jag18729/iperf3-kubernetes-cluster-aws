AWSTemplateFormatVersion: '2010-09-09'
Description: EKS Cluster with NodeGroup for iperf3 Benchmarking

Parameters:
  ClusterName:
    Description: "Name of the EKS Cluster"
    Type: String
    Default: "CLUSTER_NAME"
  ClusterVersion:
    Description: "Kubernetes version for the EKS cluster"
    Type: String
    Default: "1.21"
  VpcId:
    Description: "VPC ID for the EKS Cluster"
    Type: AWS::EC2::VPC::Id
    Default: "VPC_ID"
  SubnetIds:
    Description: "Comma separated list of Subnet IDs"
    Type: List<AWS::EC2::Subnet::Id>
    Default: [ "SUBNET_ID_1", "SUBNET_ID_2" ]
  NodeInstanceType:
    Description: "EC2 instance type for EKS worker nodes"
    Type: String
    Default: "t3.medium"
  NodeAutoScalingGroupMinSize:
    Description: "Minimum number of worker nodes"
    Type: Number
    Default: 2
  NodeAutoScalingGroupMaxSize:
    Description: "Maximum number of worker nodes"
    Type: Number
    Default: 4
  NodeGroupName:
    Description: "Name of the Node Group"
    Type: String
    Default: "EKSNodeGroup"
  KeyName:
    Description: "EC2 KeyPair name to enable SSH access to the worker nodes"
    Type: AWS::EC2::KeyPair::KeyName
    Default: "KEY_NAME"

Resources:
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: 
        Ref: ClusterName
      Version: 
        Ref: ClusterVersion
      RoleArn: 
        'Fn::GetAtt': [EKSClusterRole, Arn]
      ResourcesVpcConfig:
        SubnetIds: 
          Ref: SubnetIds

  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy

  NodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref NodeInstanceRole

  EKSNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref ClusterName
      NodegroupName: !Ref NodeGroupName
      ScalingConfig:
        MinSize: !Ref NodeAutoScalingGroupMinSize
        MaxSize: !Ref NodeAutoScalingGroupMaxSize
        DesiredSize: !Ref NodeAutoScalingGroupMinSize
      Subnets: !Ref SubnetIds
      InstanceTypes:
        - !Ref NodeInstanceType
      NodeRole: !GetAtt NodeInstanceRole.Arn

Outputs:
  ClusterName:
    Description: "EKS Cluster Name"
    Value: !Ref ClusterName
  ClusterEndpoint:
    Description: "EKS Cluster Endpoint"
    Value: !GetAtt EKSCluster.Endpoint
  ClusterCertificateAuthorityData:
    Description: "EKS Cluster CA Data"
    Value: !GetAtt EKSCluster.CertificateAuthorityData
